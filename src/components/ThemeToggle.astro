---
import Moon from "@/icons/Moon.astro";
import Sun from "@/icons/Sun.astro";
import System from "@/icons/System.astro";

const THEMES = {
  dark: "Dark",
  light: "Light",
  system: "System",
};
---

<div class="relative p-3 md:px-5 cursor-pointer hover:text-blue-500 dark:hover:text-blue-400 hover:[&>button]:scale-125">
  <button
    id="theme-menu-btn"
    class="flex transition-transform"
  >
    <Moon id="dark-icon" class="theme-icon size-5 transition-all" />
    <Sun
      id="light-icon"
      class="theme-icon absolute size-5 scale-[1.2] transition-all"
    />
    <System
      id="system-icon"
      class="theme-icon absolute size-5 transition-all"
    />
  </button>
  <div
    id="themes-menu"
    class="absolute scale-0 right-full -top-1/3 p-2 transition-all origin-right shadow-[0px_3px_8px_rgb(0,0,0,0.2)] rounded-lg text-gray-900 dark:text-gray-300 bg-white dark:bg-gray-900"
  >
    {
      Object.entries(THEMES).map(([key, theme]) => (
        <button
          class="theme-option flex w-full items-center justify-stretch gap-2 pe-5 ps-2 py-1 rounded-md transition hover:bg-gray-300 dark:hover:bg-gray-800"
          id={key}
        >
          {theme}
        </button>
      ))
    }
  </div>
</div>

<script is:inline>
  const matchMedia = window.matchMedia("(prefers-color-scheme: dark)");
  const themeOptions = document.querySelectorAll(".theme-option");
  const themeIcons = document.querySelectorAll(".theme-icon");
  const themeMenuBtn = document.querySelector("#theme-menu-btn");
  const themeMenu = document.querySelector("#themes-menu");

  const getThemePreference = () => {
    if (typeof localStorage !== "undefined") {
      return localStorage.getItem("theme") ?? "system";
    }
    return matchMedia.matches ? "dark" : "light";
  };

  const updateTheme = () => {
    const themePreference = getThemePreference();
    const isDark =
      themePreference === "dark" ||
      (themePreference === "system" && matchMedia.matches);
    document.documentElement.classList[isDark ? "add" : "remove"]("dark");
    updateIcon(themePreference);
  };

  const updateIcon = (themePreference) => {
    themeIcons.forEach((icon) => {
      id = icon.id.split("-")[0];
      icon.style.scale = id === themePreference ? 1 : 0;
    });
  };

  const setThemePreference = (theme) => {
    localStorage.setItem("theme", theme);
    updateTheme();
  };

  updateTheme();

  themeOptions.forEach((btn) => {
    btn.addEventListener("click", () => {
      setThemePreference(btn.id);
    });
  });

  themeMenuBtn.addEventListener("click", (e) => {
    e.stopPropagation();
    themeMenu.classList.toggle("scale-0",);
  });

  document.addEventListener("click", () => {
    themeMenu.classList.add("scale-0");
  });
</script>
