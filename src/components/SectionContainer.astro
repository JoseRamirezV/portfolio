---
interface Props {
  class?: string;
  id?: string;
  title?: string;
}

const { class: className, id, title } = Astro.props;
---

<section
  id={id}
  data-section={id}
  class={`${className} scroll-m-20 w-full mx-auto max-w-sm sm:max-w-xl md:max-w-2xl lg:max-w-4xl`}
>
  {
    title && (
      <h2 class="flex items-center text-4xl font-semibold gap-x-3 mb-10 text-gray-800 dark:text-white">
        <slot name="icon" />
        {title}
      </h2>
    )
  }
  <slot />
</section>
<script is:inline>
  if (matchMedia("(min-width: 640px)").matches) {
    const sections = document.querySelectorAll("section");
    const navItems = document.querySelectorAll(".section_link");

    const onChange = (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") === entry.target.id) {
              item.classList.add("lg:text-blue-500");
              item.classList.add("lg:dark:text-blue-400");
              item.firstElementChild.classList.add("lg:scale-125");
            } else {
              item.classList.remove("lg:text-blue-500");
              item.classList.remove("lg:dark:text-blue-400");
              item.firstElementChild.classList.remove("lg:scale-125");
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(onChange, {
      root: null,
      rootMargin: "0px",
      threshold: 0.4,
    });

    sections.forEach((section) => {
      observer.observe(section);
    });

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };
  }
</script>
