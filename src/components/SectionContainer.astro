---
interface Props {
  class?: string;
  id?: string;
  title?: string;
}

const { class: className, title, id } = Astro.props;
---

<section
  id={id}
  data-section={id}
  class={`${className} scroll-m-20 w-full mx-auto max-w-sm sm:max-w-xl md:max-w-2xl lg:max-w-4xl`}
>
  {
    title && (
      <h2 class='flex items-center text-3xl font-semibold gap-x-3 mb-6 text-gray-800 dark:text-white'>
        <slot name='icon' />
        {title}
      </h2>
    )
  }
  <slot />
</section>
<script is:inline>
  if (matchMedia('(min-width: 640px)').matches) {
    const sections = document.querySelectorAll('section');
    const navItems = document.querySelectorAll('.section_link');
    const anchor = document.querySelector('#lang');
    const initialUrl = anchor.getAttribute('href');

    const onChange = (entries) => {
      let newURL;
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          if (entry.target.id === 'home') {
            newURL = initialUrl;
            if (newURL !== anchor.getAttribute('href')) {
              anchor.setAttribute('href', newURL);
            }
            return;
          }
          navItems.forEach((item) => {
            if (entry.target.id === item.getAttribute('aria-label')) {
              newURL = initialUrl + '#' + entry.target.id;
              if (newURL !== anchor.getAttribute('href')) {
                anchor.setAttribute('href', newURL);
              }
              item.classList.add('md:text-blue-500', 'md:dark:text-blue-400');
              item.firstElementChild.classList.add('md:scale-125');
            } else {
              item.classList.remove(
                'md:text-blue-500',
                'md:dark:text-blue-400'
              );
              item.firstElementChild.classList.remove('md:scale-125');
              newURL = initialUrl;
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(onChange, {
      root: null,
      rootMargin: '0px',
      threshold: 0.4,
    });

    sections.forEach((section) => {
      observer.observe(section);
    });

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === 'hidden') {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };
  }
</script>
